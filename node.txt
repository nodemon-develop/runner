-- MySQL dump 10.13  Distrib 8.0.22, for Win64 (x86_64)
--
-- Host: localhost    Database: nodeform
-- ------------------------------------------------------
-- Server version	8.0.22

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `form`
--

DROP TABLE IF EXISTS `form`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `form` (
  `username` varchar(30) NOT NULL,
  `email` varchar(30) NOT NULL,
  `age` int NOT NULL,
  `password` varchar(255) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `form`
--

LOCK TABLES `form` WRITE;
/*!40000 ALTER TABLE `form` DISABLE KEYS */;
/*!40000 ALTER TABLE `form` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-03-07  0:46:58

CREATE TABLE products (
    productID    INT UNSIGNED  NOT NULL AUTO_INCREMENT,
    productCode  CHAR(3)       NOT NULL DEFAULT '',
    name         VARCHAR(30)   NOT NULL DEFAULT '',
    supplierID   INT UNSIGNED  NOT NULL,
    quantity     INT UNSIGNED  NOT NULL DEFAULT 0,
    price        DECIMAL(7,2)  NOT NULL DEFAULT 99999.99,
    PRIMARY KEY  (productID)
);

INSERT INTO products (productCode, name, supplierID, quantity, price) VALUES
    ('PEC', 'Pencil 2B', 1, 10000, 0.48),
    ('PEC', 'Pencil 2H', 1, 8000, 0.49),
    ('PEN', 'Pen Red', 1, 12000, 1.20),
    ('PEN', 'Pen Blue', 2, 12500, 1.15),
    ('PEN', 'Pen Black', 2, 13000, 1.00),
    ('PPR', 'A4', 4, 500, 4.50),
    ('PPR', 'A5', 4, 800, 5.50),
    ('PPR', 'A3', 2, 740, 8.00),
    ('PPR', 'A2', 2, 250, 10.00),
    ('PEC', 'Pencil Color Set N50', 3, 1000, 25.50),
    ('PEC', 'Pencil Color Set N25', 1, 1100, 20.50),
    ('PEC', 'Pencil Color Set N10', 1, 700, 10.00),
    ('BLK', 'Blackboard 2 x 1.5', 2, 210, 20.00),
    ('BLK', 'Blackboard 1 x 0.5', 3, 200, 12.00),
    ('BLK', 'Blackboard 0.5 x 0.2', 2, 400, 6.00);

=====================================================================


===update===


<html>
    <head>
    </head>
    <body>
            <a href="/" role="button" class="secondary">Home Page</a>
            <hr>
            <form action="/update/<%=id%>" method="POST">
                <fieldset>
                    <label for="name">New Name</label>
                    <input type="text" name="name" >
                    <br>
                    <label for="price">New Price</label>
                    <input type="text" name="price">
                    <br/>
                </fieldset>
                <button>Update</button>
            </form>
    </body>
</html>

===register===
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Register Page</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
</head>
<body>
    <h1>Register</h1>

    <% message.forEach( (elm) => { %>
        <p><%= elm.msg %></p>
    <%}) %>
    <form action="/register" method="POST">
        <fieldset>
            <label for="username">Username</label>
            <br>
            <input type="text" name="username">
            <br>
            <label for="email">Email</label>
            <br>
            <input type="text" name="email">
            <br>
            <label for="age">Age</label>
            <br>
            <input type="number" name="age">
            <br>
            <label for="password">Password</label>
            <br>
            <input type="password" name="password">
            <br>
            <label for="confirmPassword">Confirm password</label>
            <br>
            <input type="password" name="confirmPassword">
            <br>
        </fieldset>
        <button>Register</button>
    </form>
    <p>Have an account? Login from <a href='/login'>here</a></p>
</body>
</html>

=================================================================

===login===

<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Login Page</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
</head>
<body>
    <h1>Login</h1>
    
    <%if (message) {%>
        <p><%=message%></p>
    <%}%>
    <form action="/login" method="POST">
        <fieldset>
            <label for="username">Username</label>
            <br>
            <input type="text" name="username">
            <br>
            <label for="password">Password</label>
            <br>
            <input type="password" name="password">
        </fieldset>
        <button>Login</button>
    </form>
    <p>Don't have account? You can register from <a href="/register">here</a></p>
</body>
</html>

===================================================================================

===APP===

var express = require('express');
var mysql = require('mysql2');
var path = require('path');
var bodyParser = require('body-parser');
var bcrypt = require('bcrypt');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var {body, validationResult} = require('express-validator');
require('dotenv').config()

var app = express()

app.set('view engine', 'ejs')
app.use('/public', express.static('public'))
app.use(bodyParser.urlencoded({extended: false}))
app.use(cookieParser())
app.use(session({
    secret: "Mysecretkey123",
    cookie: {maxAge: 30000},
    resave: false,
    saveUninitialized: false
}))

var conn = mysql.createConnection({
    host: 'localhost',
    user: process.env.USER,
    password: process.env.PASSWORD,
    database: 'nodeform'
})

conn.connect((err) => {
    if (err) throw err;
    console.log('Connected to the db successfully')
})

let registerErrors = []
let loginErrors = ''
let products = []

app.get('/', (req, res) => {
    if (req.session.isAuth) {
        let current_user = req.cookies.current_user
        let sql = `select * from products`
        conn.query(sql, (err, result) => {
            res.render('index', {username: current_user.username, products: result})
        })
    }
    else {
        res.redirect('login')
    }
})

app.post('/', (req, res) => {
    if (req.session.isAuth) {
        let current_user = req.cookies.current_user
        let product_code = req.body.product_code
        let product_count = Number(req.body.product_count)
        let productSql = ``
        if (product_count == 0) {
            productSql = `select * from products where productCode = ?`
        }
        else {
            productSql = `select * from products where productCode = ? limit ?`
        }
        conn.query(productSql, [product_code, product_count], function(err, result) {
            res.render('index', {username: current_user.username, products: result})
        })
    }
    else{
        res.redirect('login')
    }
})

app.get('/register', (req, res) => {
    res.render('register', {message: registerErrors})
})

app.post('/register', 
body('username').trim().escape().isAlpha().withMessage('Username should be letters only').isLength({min: 4, max: 15}).withMessage('Username should be between 4 and 15 chars'),
body('email').trim().escape().isEmail().withMessage('Invalid email'),
body('age').trim().escape().isInt({min: 18, max: 50}).withMessage('Age should be between 18 and 50'),
body('password').trim().escape().isLength({min: 8}).withMessage('Password should be min 8 chars').matches('[0-9]').withMessage('Password must contain a number').matches('[A-Z]').withMessage('Password must contain an uppercase letter'),
body('confirmPassword').trim().escape().custom((value, {req}) => {
    if (value === req.body.password) return true
    else return false
}).withMessage('Passwords do not match'),
(req, res) => {
    var errors = validationResult(req);
    if (!errors.isEmpty()) {
        res.render('register', {message: errors.array()})
    }
    else {
        query1 = `SELECT count(*) as total from form where username = ?`
        conn.query(query1, [req.body.username], (err, result) => {
            if (result[0].total > 0){
                message = [{'msg': 'Username already exists'}]
                res.render('register', {message: message})
            }
            else {
                bcrypt.hash(req.body.password, 12).then(function(hashpass){
                    query2 = `INSERT INTO form VALUES (?, ?, ?, ?)`
                    conn.query(query2, [req.body.username, req.body.email, req.body.age, hashpass])
                    res.redirect('login', 304, {message: loginErrors})
                })
            }
        })
    }
})

app.get('/login', (req, res) => {
    res.render('login', {message: loginErrors})
})

app.post('/login', (req, res) => {
    let {username, password} = req.body;
    query3 = `SELECT password from form where username = ?`
    query4 = `SELECT count(*) as total from form where username = ?`
    conn.query(query4, [username], (err, result) => {
        if (result[0].total > 0){
            conn.query(query3, [username], (err, result) => {
                let passwordDb = result[0].password;
                bcrypt.compare(password, passwordDb).then(function(result){
                    if (result){
                        req.session.isAuth = true
                        res.cookie('current_user', {username: username}, {maxAge: 30000})
                        setTimeout(() => {
                            console.log('Running')
                            res.redirect('/')

                        }, 1)
                    }
                    else {
                        res.render('login', {message: 'Credentials are incorrect'})
                    }
                })
            })
        }
        else res.render('login', {message: 'Credentials are incorrect'})
    })
})



app.post('/logout', (req, res) => {
    req.session.isAuth = false
    res.clearCookie('connect.sid')
    res.clearCookie('current_user')
    req.session.destroy(function (err) {
      res.redirect('/');
    });
})

app.get('/update/:id', (req, res) => {
    if (req.session.isAuth){
        let id = req.params.id
        res.render('update', {id: id})
    }
    else {
        res.redirect('/login')
    }
})

app.post('/update/:id', (req, res) => {
    if (req.session.isAuth){
        let {name, price} = req.body
        let id = req.params.id
        let updateProductSql = `UPDATE products set name = ?, price = ? where productID = ?`
        conn.query(updateProductSql, [name, price, id], (err, result) => {
            res.redirect('/')
        })
    }
    else {
        res.redirect('/login')
    }
})

app.get('/delete/:id', (req, res) => {
    if (req.session.isAuth){
        let id = req.params.id
        let deleteProductSql = `DELETE from products where productID = ?`
        conn.query(deleteProductSql, [id], (err, result) => {
            res.redirect('/')
        })
    }
    else {
        res.redirect('/login')
    }
})

app.listen(3000);
console.log("Your server is running at port 3000");

==================================================================

===css==
div.error{
    padding: 15px 20px 5px 20px;
    margin-bottom: 20px;
    border-radius: 4px;
    background-color: rgb(250, 220, 225);
    font-weight: bold !important;
}
div.success{
    padding: 15px 20px 5px 20px;
    margin-bottom: 20px;
    border-radius: 4px;
    background-color: rgb(210, 250, 220);
    font-weight: bold !important;
}
================================================================

===index===

<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Home Page</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
</head>
<body>
    <h1>Welcome to the dashboard, <%=username%></h1>
    <form action="/logout" method="POST">
        <button>Logout</button>
    </form>
    <h2>Select product code and count to display the list of products</h2>
    <hr>
    <form action="/" method="POST">
        <fieldset>
            <label for="product_code">Product Code</label>
            <select name="product_code">
                <option value="PEC">PEC</option>
                <option value="PEN">PEN</option>
                <option value="PPR">PPR</option>
                <option value="BLK">BLK</option>
            </select>
            <br/>
            <label for="product_count">Count of products</label>
            <input type="text" name="product_count">
            <br/>
        </fieldset>
       <button>Display</button>       
    </form>
    <table>
        <thead>
            <tr>
                <th> # </th>
                <th> Product Code </th>
                <th> Name </th>
                <th> Supplier ID </th>
                <th> Quantity </th>
                <th> Price </th>
            </tr>
        </thead>
        <tbody>
                <%products.forEach((product) => {%>
                    <tr>
                        <td> <%= product.productID %> </td>
                        <td> <%= product.productCode %> </td>
                        <td> <%= product.name %> </td>
                        <td> <%= product.supplierID %> </td>
                        <td> <%= product.quantity %> </td>
                        <td> <%= product.price %> </td>
                        <td> <a href="/update/<%= product.productID %>">Edit</a></td>
                        <td> <a href="/delete/<%= product.productID %>">Delete</a></td>
                    </tr>
                <%})%>
        </tbody>
    </table>
</body>
</html>








